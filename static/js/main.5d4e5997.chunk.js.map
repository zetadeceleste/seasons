{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAEJP,EAAaS,GAA/BP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,E,2MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,mFAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAK3C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,uCAAaqB,KAAKX,MAAMC,aAAxB,MAGJU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAIxB,OAAO,yBAAKF,UAAU,cAAcgB,KAAKC,qB,GAvB3BC,IAAMC,WA2BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.5d4e5997.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let\\'s hit the beach!\",\n    iconName: 'sun'\n  },\n  winter: {\n    text: \"Burr, it is chilly\",\n    iconName: 'snowflake'\n  }\n}\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const {text, iconName} = seasonConfig[season]; // {text, iconName}\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Spinner = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({ errorMessage: err.message })\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage} </div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    return <Spinner message=\"Please accept location request\" />;\n  }\n\n  render() {\n    return <div className=\"border red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}